ggplot(mtcars, aes(x=am, y=disp)) + geom_gear()
ggplot(mtcars, aes(x=am, y=disp)) + geom_dotplot()
ggplot(mtcars, aes(x=am, y=disp)) + geom_dotplot()
ggplot(mtcars, aes(x=am, y=drat)) + geom_dotplot()
ggplot(mtcars, aes(x=am, y=drat)) + geom_line()
ggplot(mtcars, aes(x=am, y=drat)) + geom_dotplot()
ggplot(mtcars, aes(x=am, y=drat)) + geom_jitter()
ggplot(mtcars, aes(x=am, y=drat)) + geom_point()
ggplot(mtcars, aes(x=am, y=drat)) + geom_boxplot()
head(mtcars)
mtcars$am <- as.factor(mtcars$am)
library(plyr)
mtcars$am <- mapvalues(mtcars$am, from = c("0", "1"), to = c("Automatic", "Manual"))
library(ggplot2)
one <- ggplot(mtcars, aes(x=am, y=cyl)) + geom_boxplot()
two <- ggplot(mtcars, aes(x=am, y=disp)) + geom_boxplot()
three <- ggplot(mtcars, aes(x=am, y=hp)) + geom_boxplot()
four <- ggplot(mtcars, aes(x=am, y=drat)) + geom_boxplot()
five <- ggplot(mtcars, aes(x=am, y=wt)) + geom_boxplot()
six <- ggplot(mtcars, aes(x=am, y=qsec)) + geom_boxplot()
seven <- ggplot(mtcars, aes(x=am, y=vs)) + geom_boxplot()
eight <- ggplot(mtcars, aes(x=am, y=gear)) + geom_boxplot()
nine <- ggplot(mtcars, aes(x=am, y=carb)) + geom_boxplot()
multiplot(one, two, three four, five, six, seven, eight, nine, cols=3)
multiplot(one, two, three, four, five, six, seven, eight, nine, cols=3)
multiplot(plotlist=c(one, two, three, four, five, six, seven, eight, nine), cols=3)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(one, two, three, four, five, six, seven, eight, nine, cols=3)
multiplot(plotlist=c(one, two, three, four, five, six, seven, eight, nine), cols=3)
multiplot(c(one, two, three, four, five, six, seven, eight, nine), cols=3)
multiplot(one, two, three, four, five, six, seven, eight, nine, cols=3)
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
shuttle
library(MASS)
head(shuttle)
table(use)
table(shuttle$use)
mdl <- glm(shuttle$use ~ shuttle$wind, binomial, shuttle)
summary(mdl)
class(shuttle$wind)
head(shuttle)
mdl2 <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, binomial, shuttle)
summary(mdl2)
head(shuttle)
swirl()
swirl()
shuttle
head(shuttle)
head(ravenData)
ravenData$new <- ravenWinNum - 1
ravenData$new <- ravenData$ravenWinNum - 1
bye(0)
bye()
ravenData$new <- ravenData$ravenWinNum - 1
head(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial ,ravenData)
mdl <- glm(new ~ ravenScore, binomial ,ravenData)
ravenData$new <- 1 - ravenData$ravenWinNum
head(ravenData)
mdl <- glm(new ~ ravenScore, binomial ,ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial ,ravenData)
mdl2 <- glm(new ~ ravenScore, binomial ,ravenData)
summary(mdl)
summary(mdl2)
InsectSprays
head(InsectSprays)
mdl <- glm(count ~ spray, Poisson, InsectSprays)
mdl <- glm(count ~ spray, "Poisson", InsectSprays)
mdl <- glm(count ~ spray, "poisson", InsectSprays)
sumary(mdl)
summary(mdl)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineTerms
knots < 1:2
knots <- 1:2
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineTerms
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineTerms
xMat <- cbind(1, x, splineTerms)
xMat
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE)
lines(x, yhat, co="red", lwd=2)
yhat
summary(lm(y ~ xMat - 1))
mdl <- glm(count ~ spray, "poisson", InsectSprays)
summary(mdl)
swil()
swirl()
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,1])
as.integer(head(hits[,1]))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hit[704,]
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date + offset=log(visits+1), poission, hits)
mdl2 <- glm(visits ~ date + offsetlog(visits+1), poission, hits)
mdl2 <- glm(visits ~ date + offsetlog(visits+1), poisson, hits)
mdl2 <- glm(visits ~ date + offset(log(visits+1)), poisson, hits)
mdl2 <- glm(visits ~ date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(formula - simplystats ~ date, family = poisson, data = hits, offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
mdl <- glm(count ~ spray, "poisson", InsectSprays)
summary(mdl)
colSums
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:MASS", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:swirl", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
colSums
dgamma
colsums
colSums
show
list.packages()
installed.packages()
installed.packages()[installed.packages()$Priority=="base",]
pack <- installed.packages()
pack()[pack$Priority=="base",]
pack[pack$Priority=="base",]
colnames(pack)
class(pac)
class(pack)
data.frame(pack)
pack[pack$Priority=="base",]
pack <- data.frame(pac)
pack <- data.frame(pack)
pack[pack$Priority=="base",]
pack <- installed.packages()
df <- data.frame(pack[1], pack[3])
head(df)
head(pacl)
head(pack)
installed.packages()
pack <- installed.packages()
head(pack])
head(pack)
pack[1,]
pack[,1]
pack[,3]
pack[,4]
pack[,2]
pack[,5]
head(pack)
pack[,4]
lm
colsms
colSums
show
show
dgamma
lm
predict
colSums
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(trainig)
head(training)
colnames(training)
colnames(training) == "IL*"
colnames(training) == "IL^"
colnames(training) == "IL."
string = string
string[1]
string = "string"
string[1]
string[1,2]
grep("st", string)
grepl("st", string)
substring(string, 1)
substring(string, 1, 1)
substring(string, 1, 2)
colnames(training)[substring(colnames(training))=="IL"]
colanmes(training)
colnames(training)
colnames(training)[substring(colnames(training), 1, 2)=="IL"]
substring(colnames(training), 1, 2)=="IL"
training[,substring(colnames(training), 1, 2)=="IL"]
head(training[,substring(colnames(training), 1, 2)=="IL"])
head(training)
colsNeeded <- substring(colnames(training), 1, 2)=="IL"
colsNeeded
colsNeeded[1] <- TRUE
colsNeeded[1] <- TRUE
colsNeeded
head(training[,colsNeeded])
newFrame <- training[,colsNeeded]
preProess(newFrame)
preProcess(newFrame)
preProcess(newFrame)
preProcess(newFrame, outcome = diagnosis, thresh = 0.8)
preProcess(newFrame[-1], outcome = diagnosis, thresh = 0.8)
head(newFrame[-1,])
head(newFrame[,-1])
preProcess(newFrame[,-1], outcome = diagnosis, thresh = 0.8)
preProcess(newFrame[,-1], thresh = 0.8)
preProcess(newFrame[,-1], thresh = 0.8, method="pca")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict(model, testSA)
summary(missClass)
head(teset$chd)
head(test$chd)
head(testSA$chd)
missClass(testSA$chd, predict(model, testSA))
missClass(trainSA$chd, predict(model, trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rforest <- train(y ~ .,data=vowel.train,method="rf",prox=TRUE)
varImp(rforest)
set.seed(33833)
rforest <- train(y ~ .,data=vowel.train,method="rf",prox=TRUE)
varImp(rforest)
3833
set.seed(3833)
rforest <- train(y ~ .,data=vowel.train,method="rf",prox=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y); vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rf <- train(y ~ ., method="rf", data = vowel.train)
library(caret)
rf <- train(y ~ ., method="rf", data = vowel.train)
boospred <- train(y ~ ., method="gbm", data = vowel.train)
pred1 <- predict(rf, vowel.test); pred2 <- predict(boospread, vowel.test)
pred1 <- predict(rf, vowel.test); pred2 <- predict(boospred, vowel.test)
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="gam",data=predDF)
warnings()
head(pred1)
pred1
table(pred1, vowel.test$y)
xtabs(pred1, vowel.test$y)
xtab(pred1, vowel.test$y)
prop.table(pred1, vowel.test$y)
ftable(pred1, vowel.test$y)
table(pred1, vowel.test$y)[1,1]
table(pred1, vowel.test$y)[1:2,1]
table(pred1, vowel.test$y)[1:2,1:2]
pairs(pred1, vowel.test$y)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
set.seed(33833)
rf <- train(y ~ ., method="rf", data = vowel.train)
set.seed(33833)
rf <- train(y ~ ., method="rf", data = vowel.train)
set.seed(33833)
rf <- train(y ~ ., method="rf", data = vowel.train)
boospred <- train(y ~ ., method="gbm", data = vowel.train)
pred1 <- predict(rf, vowel.test)
pred2 <- predict(boospred, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
head(train)
head(training)
randf <- train(diagnosis ~ ., mehtod="rf", data=training)
boost <- train(diagnosis ~ ., mehtod="gbm", data=training)
lda <- train(diagnosis ~ ., mehtod="lda", data=training)
pred1 <- predict(randf, testing)
pred2 <- predict(boost, testing)
pred3 <- predict(lda, testing)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ .,method="rf",data=predDF)
finPred <- predict(combModFit, testing)
confusionMatrix(finPred, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
head(training)
model <- train(CompressiveStrength ~ ., method="lasso", data=cement)
model <- train(CompressiveStrength ~ ., method="lasso", data=training)
model <- train(CompressiveStrength ~ ., method="lasso", data=training)
?plot.enet
plot(model)
?enet
model <- train(CompressiveStrength ~ ., method="lasso", data=training, trace=TRUE)
?plot.enet
head(training)
matrix <- data.matrix(training[-9])
head(matrix)
enet(matrix, training$CompressiveStrength, trace=TRUE)
enet(matrix, training$CompressiveStrength)
plot(enet(matrix, training$CompressiveStrength))
plot(enet(matrix, training$CompressiveStrength), xvar=penalty)
plot(enet(matrix, training$CompressiveStrength), xvar="penalty")
library(lubridate)  # For year() function below
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
library(forecast)
install.packages("forecast")
head(training)
?bats
library(forecast)
?bats
class(training)
bats(training)
setwd("~/Documents/Darts Business/JSON Data/Premier League/Week 15/lewisanderson/")
## Set the name of the players
playerA = "lewis"
playerB = "anderson"
## This following code does not need to be touched it will produce the statistics.
library(rjson)
AJSON <- fromJSON(file=paste(playerA, ".json", sep = ""))
BJSON <- fromJSON(file=paste(playerB, ".json", sep = ""))
head(AJSON)
Capitalize("a")
Capitalize("a")
capitalize("a")
library(Hmisc)
capitalize("a")
head(AJSON)
createDataFrame <- function(JSONList) {
bed <- vector(); dartScore <- vector(); aimedat <- vector()
leg <- vector(); sB4Dart <- vector(); sAfDart <- vector()
number <- vector(); average <- vector();
algorithm <- vector();
for (n in 1:length(JSONList)) {
bed <- c(bed, JSONList[[n]][[1]])
dartScore <- c(dartScore, JSONList[[n]][[2]])
aimedat <- c(aimedat, JSONList[[n]][[3]])
leg <- c(leg, JSONList[[n]][[5]])
sB4Dart <- c(sB4Dart, JSONList[[n]][[6]])
sAfDart <- c(sAfDart, JSONList[[n]][[7]])
number <- c(number, JSONList[[n]][[8]])
average <- c(average, JSONList[[n]][[9]])
algorithm <- c(algorithm, JSONList[[n]][[4]])
}
return(data.frame(number, leg, dartScore, bed, aimedat, sB4Dart, sAfDart, average, algorithm))
}
adf <- createDataFrame(AJSON)
bdf <- createDataFrame(BJSON)
head(adf)
adf$aimedat[1]
adf$aimedat[1][1]
as.character(adf$aimedat[1])[1]
as.character(adf$aimedat[1])
substr(adf$aimedat[1])
substr(adf$aimedat[1], 1, 1)
substr(adf$aimedat,1,1)
read.csv(lewis.csv)
adf <- read.csv("lewis.csv")
head(adf)
substr(adf$aimedat,1,1)
adf <- read.csv("lewis.csv")
substr(adf$aimedat,1,1)
substr(adf$aimedat,1,1) == "t"
adf[substr(adf$aimedat,1,1) == "t",]
adf[substr(adf$aimedat,1,1) == "t",][adf$aimedat == adf$bed,]
dartsThrownAtTrip <- adf[substr(adf$aimedat,1,1) == "t",]
dartsThrownAtTrip[dartsThrownAtTrip$aimedat == dartsThrownAtTrip$bed,]
head(adf)
adf <- read.csv(paste(playerA, ".csv"))
bdf <- read.csv(paste(playerB, ".csv"))
cols = c(4, 5)
adf[,cols] = apply(df[,cols], 2, function(x) as.character(x))
bdf[,cols] = apply(df[,cols], 2, function(x) as.character(x))
adf <- read.csv(paste(playerA, ".csv"))
bdf <- read.csv(paste(playerB, ".csv"))
cols = c(4, 5)
adf[,cols] = apply(adf[,cols], 2, function(x) as.character(x))
bdf[,cols] = apply(bdf[,cols], 2, function(x) as.character(x))
adf <- read.csv(paste(playerA, ".csv", sep=""))
bdf <- read.csv(paste(playerB, ".csv", sep=""))
cols = c(4, 5)
adf[,cols] = apply(adf[,cols], 2, function(x) as.character(x))
bdf[,cols] = apply(bdf[,cols], 2, function(x) as.character(x))
head(adf)
class(adf$aimedat)
class(adf$bed)
dartsThrownAtTrip <- adf[substr(adf$aimedat,1,1) == "t",]
nrow(tripAim[tripAim$aimedat == tripAim$bed,]) / nrow(tripAim)
tripAim <- adf[substr(adf$aimedat,1,1) == "t",]
nrow(tripAim[tripAim$aimedat == tripAim$bed,]) / nrow(tripAim)
playerA
tripAim <- adf[substr(adf$aimedat,1,1) == "t",]
decimal <- nrow(tripAim[tripAim$aimedat == tripAim$bed,]) / nrow(tripAim)
paste(round(100*decimal, 3), "%", sep="")
playerA
tripAim <- adf[substr(adf$aimedat,1,1) == "t",]
decimal <- nrow(tripAim[tripAim$aimedat == tripAim$bed,]) / nrow(tripAim)
paste(round(100*decimal, 3), "%", sep="")
playerB
tripAim <- bdf[substr(bdf$aimedat,1,1) == "t",]
decimal <- nrow(tripAim[tripAim$aimedat == tripAim$bed,]) / nrow(tripAim)
paste(round(100*decimal, 3), "%", sep="")
head(adf)
average(adf[adf$aimedat== "t20",]$dartScore)
mean(adf[adf$aimedat== "t20",]$dartScore)
bdf$aimedat
substr(bdf$aimedat, 1, 1)
playerA
mean(adf[adf$aimedat== "t20",]$dartScore)
playerB
mean(adf[bdf$aimedat== "t20",]$dartScore)
playerA
mean(adf[adf$aimedat== "t19",]$dartScore)
playerB
mean(adf[bdf$aimedat== "t19",]$dartScore)
triples <- data.frame()
triples$players <- c(playerA, playerB)
testvec1 <- c(20, 6, 4)
testvec2 <- c(5, 4, 10)
testvec1 / testvec2
